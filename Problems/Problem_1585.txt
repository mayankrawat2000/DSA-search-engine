Recently, you found a bot to play "Rock paper scissors" with. Unfortunately, the bot uses quite a simple algorithm to play: he has a string s=s1s2…sns=s1s2…sn of length nn where each letter is either R, S or P.
While initializing, the bot is choosing a starting index pospos (1≤pos≤n1≤pos≤n), and then it can play any number of rounds. In the first round, he chooses "Rock", "Scissors" or "Paper" based on the value of sposspos: 
  if sposspos is equal to R the bot chooses "Rock";  if sposspos is equal to S the bot chooses "Scissors";  if sposspos is equal to P the bot chooses "Paper"; 
In the second round, the bot's choice is based on the value of spos+1spos+1. In the third round — on spos+2spos+2 and so on. After snsn the bot returns to s1s1 and continues his game.
You plan to play nn rounds and you've already figured out the string ss but still don't know what is the starting index pospos. But since the bot's tactic is so boring, you've decided to find nn choices to each round to maximize the average number of wins.
In other words, let's suggest your choices are c1c2…cnc1c2…cn and if the bot starts from index pospos then you'll win in win(pos)win(pos) rounds. Find c1c2…cnc1c2…cn such that win(1)+win(2)+⋯+win(n)nwin(1)+win(2)+⋯+win(n)n is maximum possible.
