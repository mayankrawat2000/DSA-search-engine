A bracket sequence is a string containing only characters "(" and ")". A regular bracket sequence (or, shortly, an RBS) is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters "1" and "+" between the original characters of the sequence. For example:
  bracket sequences "()()" and "(())" are regular (the resulting expressions are: "(1)+(1)" and "((1+1)+1)");  bracket sequences ")(", "(" and ")" are not. 
You are given a string ss, which is an RBS. You can apply any number of operations to this string. Each operation can have one of the following types:
  choose some non-empty prefix of ss and remove it from ss, so ss is still an RBS. For example, we can apply this operation as follows: "(())()(())()()" →→ "()()" (the first 1010 characters are removed);  choose some contiguous non-empty substring of ss and remove it from ss, so ss is still an RBS. For example, we can apply this operation as follows: "(())()(())()()" →→ "(())()()()" (the characters from the 77-th to the 1010-th are removed). 
The operation 22 can be applied at most kk times. Calculate the maximum number of operations you can apply until ss becomes empty.
