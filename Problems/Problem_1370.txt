John has QQ closed intervals of consecutive 2K2K-bit numbers [li,ri][li,ri] and one 16-bit value vivi for each interval. (0≤i<Q0≤i<Q)
John wants to implement a function F that maps 2K2K-bit numbers to 16-bit numbers in such a way that inputs from each interval are mapped to that interval's value. In other words: F(x)=vi,for every 0≤i<Q, and every x∈[li,ri]F(x)=vi,for every 0≤i<Q, and every x∈[li,ri] The output of F for other inputs is unimportant.
John wants to make his implementation of F fast so he has decided to use lookup tables. A single 2K2K-bit lookup table would be too large to fit in memory, so instead John plans to use two K-bit lookup tables, LSBTable and MSBTable. His implementation will look like this: F(x)=LSBTable[lowKBits(x)]&MSBTable[highKBits(x)]F(x)=LSBTable[lowKBits(x)]&MSBTable[highKBits(x)] In other words it returns the "bitwise and" of results of looking up the K least significant bits in LSBTable and the K most significant bits in MSBTable.
John needs your help. Given KK, QQ and QQ intervals [li,ri][li,ri] and values vivi, find any two lookup tables which can implement F or report that such tables don't exist.
