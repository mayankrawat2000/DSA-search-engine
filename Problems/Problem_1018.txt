This is an interactive problem.
There exists a matrix aa of size n×mn×m (nn rows and mm columns), you know only numbers nn and mm. The rows of the matrix are numbered from 11 to nn from top to bottom, and columns of the matrix are numbered from 11 to mm from left to right. The cell on the intersection of the xx-th row and the yy-th column is denoted as (x,y)(x,y).
You are asked to find the number of pairs (r,c)(r,c) (1≤r≤n1≤r≤n, 1≤c≤m1≤c≤m, rr is a divisor of nn, cc is a divisor of mm) such that if we split the matrix into rectangles of size r×cr×c (of height rr rows and of width cc columns, each cell belongs to exactly one rectangle), all those rectangles are pairwise equal.
You can use queries of the following type: 
  ? hh ww i1i1 j1j1 i2i2 j2j2 (1≤h≤n1≤h≤n, 1≤w≤m1≤w≤m, 1≤i1,i2≤n1≤i1,i2≤n, 1≤j1,j2≤m1≤j1,j2≤m) — to check if non-overlapping subrectangles of height hh rows and of width ww columns of matrix aa are equal or not. The upper left corner of the first rectangle is (i1,j1)(i1,j1). The upper left corner of the second rectangle is (i2,j2)(i2,j2). Subrectangles overlap, if they have at least one mutual cell. If the subrectangles in your query have incorrect coordinates (for example, they go beyond the boundaries of the matrix) or overlap, your solution will be considered incorrect. 
You can use at most 3⋅⌊log2(n+m)⌋3⋅⌊log2⁡(n+m)⌋ queries. All elements of the matrix aa are fixed before the start of your program and do not depend on your queries.
