Let aa and bb be two arrays of lengths nn and mm, respectively, with no elements in common. We can define a new array merge(a,b)merge(a,b) of length n+mn+m recursively as follows:
  If one of the arrays is empty, the result is the other array. That is, merge(∅,b)=bmerge(∅,b)=b and merge(a,∅)=amerge(a,∅)=a. In particular, merge(∅,∅)=∅merge(∅,∅)=∅.  If both arrays are non-empty, and a1<b1a1<b1, then merge(a,b)=[a1]+merge([a2,…,an],b)merge(a,b)=[a1]+merge([a2,…,an],b). That is, we delete the first element a1a1 of aa, merge the remaining arrays, then add a1a1 to the beginning of the result.  If both arrays are non-empty, and a1>b1a1>b1, then merge(a,b)=[b1]+merge(a,[b2,…,bm])merge(a,b)=[b1]+merge(a,[b2,…,bm]). That is, we delete the first element b1b1 of bb, merge the remaining arrays, then add b1b1 to the beginning of the result. 
This algorithm has the nice property that if aa and bb are sorted, then merge(a,b)merge(a,b) will also be sorted. For example, it is used as a subroutine in merge-sort. For this problem, however, we will consider the same procedure acting on non-sorted arrays as well. For example, if a=[3,1]a=[3,1] and b=[2,4]b=[2,4], then merge(a,b)=[2,3,1,4]merge(a,b)=[2,3,1,4].
A permutation is an array consisting of nn distinct integers from 11 to nn in arbitrary order. For example, [2,3,1,5,4][2,3,1,5,4] is a permutation, but [1,2,2][1,2,2] is not a permutation (22 appears twice in the array) and [1,3,4][1,3,4] is also not a permutation (n=3n=3 but there is 44 in the array).
There is a permutation pp of length 2n2n. Determine if there exist two arrays aa and bb, each of length nn and with no elements in common, so that p=merge(a,b)p=merge(a,b).
