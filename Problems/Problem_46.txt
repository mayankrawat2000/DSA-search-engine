The symbol ∧∧ is quite ambiguous, especially when used without context. Sometimes it is used to denote a power (a∧b=aba∧b=ab) and sometimes it is used to denote the XOR operation (a∧b=a⊕ba∧b=a⊕b). 
You have an ambiguous expression E=A1∧A2∧A3∧…∧AnE=A1∧A2∧A3∧…∧An. You can replace each ∧∧ symbol with either a PowerPower operation or a XORXOR operation to get an unambiguous expression E′E′.
The value of this expression E′E′ is determined according to the following rules: 
  All PowerPower operations are performed before any XORXOR operation. In other words, the PowerPower operation takes precedence over XORXOR operation. For example, 4XOR6Power2=4⊕(62)=4⊕36=324XOR6Power2=4⊕(62)=4⊕36=32.  Consecutive powers are calculated from left to right. For example, 2Power3Power4=(23)4=84=40962Power3Power4=(23)4=84=4096. 
You are given an array BB of length nn and an integer kk. The array AA is given by Ai=2BiAi=2Bi and the expression EE is given by E=A1∧A2∧A3∧…∧AnE=A1∧A2∧A3∧…∧An. You need to find the XOR of the values of all possible unambiguous expressions E′E′ which can be obtained from EE and has at least kk ∧∧ symbols used as XORXOR operation. Since the answer can be very large, you need to find it modulo 22202220. Since this number can also be very large, you need to print its binary representation without leading zeroes. If the answer is equal to 00, print 00.
