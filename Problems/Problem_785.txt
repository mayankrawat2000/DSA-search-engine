You are given a rooted tree. Each vertex contains aiai tons of gold, which costs cici per one ton. Initially, the tree consists only a root numbered 00 with a0a0 tons of gold and price c0c0 per ton.
There are qq queries. Each query has one of two types: 
  Add vertex ii (where ii is an index of query) as a son to some vertex pipi; vertex ii will have aiai tons of gold with cici per ton. It's guaranteed that ci>cpici>cpi.  For a given vertex vivi consider the simple path from vivi to the root. We need to purchase wiwi tons of gold from vertices on this path, spending the minimum amount of money. If there isn't enough gold on the path, we buy all we can. 
If we buy xx tons of gold in some vertex vv the remaining amount of gold in it decreases by xx (of course, we can't buy more gold that vertex has at the moment). For each query of the second type, calculate the resulting amount of gold we bought and the amount of money we should spend.
Note that you should solve the problem in online mode. It means that you can't read the whole input at once. You can read each query only after writing the answer for the last query, so don't forget to flush output after printing answers. You can use functions like fflush(stdout) in C++ and BufferedWriter.flush in Java or similar after each writing in your program. In standard (if you don't tweak I/O), endl flushes cout in C++ and System.out.println in Java (or println in Kotlin) makes automatic flush as well. 
